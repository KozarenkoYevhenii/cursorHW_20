{"version":3,"sources":["components/Post/post.js","components/Posts/posts.js","components/homepage/homepage.js","reducers/postsReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","src","photo","alt","name","nickname","date","content","image","time","Date","getDate","getMonth","Posts","state","postContent","postImage","authorName","authors","authorNickname","authorImage","postDate","changeText","e","setState","target","value","addImgURL","setAuthor","author","filter","addNewPost","this","type","onChange","selected","map","onClick","posts","post","React","Component","connect","dispatch","newPost","Homepage","initialStore","postReducer","store","action","createStore","postsReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67789580.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./post.css\"\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <div className=\"postWrapper\">\r\n          <img className=\"authorImage\" src={props.photo} alt='author' />\r\n      <div className=\"authorInfo\">\r\n        <span className=\"authorName\">{props.name}</span>\r\n        <span className=\"authorNickname\">{props.nickname}</span>\r\n        <span className=\"date\">{props.date}</span>\r\n      </div>\r\n      <div className=\"contentText\">{props.content}</div>\r\n      <img className=\"contentImage\" src={props.image} alt='content' />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"../Post/post\";\r\nimport \"./posts.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    posts: state.posts,\r\n    authors: state.authors,\r\n  };\r\n};\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    addNewPost: (newPost) =>\r\n      dispatch({\r\n        type: \"ADD_NEW_POST\",\r\n        newPost: { ...newPost },\r\n      }),\r\n  };\r\n};\r\n\r\nconst months = [\r\n  \"Jan\",\r\n  \"Fab\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\nconst time = new Date();\r\nconst date = time.getDate() + \" \" + months[time.getMonth()] + \".\";\r\n\r\nclass Posts extends React.Component {\r\n  state = {\r\n    postContent: \"\",\r\n    postImage: \"\",\r\n    authorName: this.props.authors[0].name,\r\n    authorNickname: this.props.authors[0].nickname,\r\n    authorImage: this.props.authors[0].image,\r\n    postDate: date,\r\n  };\r\n\r\n  changeText = (e) => {\r\n    this.setState({ postContent: e.target.value });\r\n  };\r\n  addImgURL = (e) => {\r\n    this.setState({ postImage: e.target.value });\r\n  };\r\n  setAuthor = (e) => {\r\n    const author = this.props.authors.filter(\r\n      (author) => author.name === e.target.value\r\n    )[0];\r\n    this.setState({\r\n      authorName: e.target.value,\r\n      authorNickname: author.nickname,\r\n      authorImage: author.image,\r\n    });\r\n  };\r\n  addNewPost = (e) => {\r\n    this.props.addNewPost(this.state);\r\n    e.target.value = \"\"\r\n    this.setState({ postContent: \"\", postImage: \"\" });\r\n    \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"posts-wrapper\">\r\n        <div className=\"new-post-wrapper\">\r\n          <label>\r\n            Publication text:\r\n            <input\r\n              value={this.postContent}\r\n              className=\"input-field\"\r\n              type=\"text\"\r\n              onChange={this.changeText}\r\n            />\r\n          </label>\r\n          <label>\r\n            Publication image (URL):\r\n            <input\r\n              value={this.postImage}\r\n              className=\"input-field\"\r\n              type=\"text\"\r\n              onChange={this.addImgURL}\r\n            />\r\n          </label>\r\n          <label>\r\n            Author:\r\n            <select\r\n              className=\"input-field\"\r\n              selected={this.props.authors[0].name}\r\n              onChange={this.setAuthor}\r\n            >\r\n              {this.props.authors.map((author) => (\r\n                <option>{author.name}</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          <button\r\n            className=\"add-post-button\"\r\n            type=\"submit\"\r\n            onClick={this.addNewPost}\r\n          >\r\n            Add Post\r\n          </button>\r\n        </div>\r\n        {this.props.posts.map((post) => {\r\n          return (\r\n            <Post\r\n              name={post.authorName}\r\n              photo={post.authorImage}\r\n              nickname={post.authorNickname}\r\n              content={post.postContent}\r\n              image={post.postImage}\r\n              date={post.postDate}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(Posts);\r\n","import React from \"react\";\r\nimport \"./homepage.css\"\r\nimport Posts from \"../Posts/posts\"\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div className=\"homepage-wrapper\">\r\n           <Posts />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","const initialStore = {\r\n  posts: [\r\n    {\r\n      authorImage:\r\n        \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n      authorName: \"Anakin Skywalker\",\r\n      authorNickname: \"@dart_vader\",\r\n      postImage:\r\n        \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n      postContent: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n      postDate: \"26 Feb.\",\r\n    },\r\n    {\r\n      authorImage:\r\n        \"https://imagesvc.meredithcorp.io/v3/mm/image?q=85&c=sc&poi=face&w=2000&h=1047&url=https%3A%2F%2Fstatic.onecms.io%2Fwp-content%2Fuploads%2Fsites%2F6%2F2017%2F03%2Fstar-wars-a-new-hope-2000.jpg\",\r\n      authorName: \"Luke Skywalker\",\r\n      authorNickname: \"@last_jedi\",\r\n      postImage:\r\n        \"https://gamespot1.cbsistatic.com/uploads/screen_kubrick/1557/15576725/3587617-rey.jpg\",\r\n      postContent: \"Congrats! You are grandpa))\",\r\n      postDate: \"27 Feb.\",\r\n    },\r\n    {\r\n      authorImage:\r\n        \"https://www.denofgeek.com/wp-content/uploads/2020/05/star-wars-rey.jpg?fit=1536%2C864\",\r\n      authorName: \"Ray Skywalker\",\r\n      authorNickname: \"@rogue\",\r\n      postImage:\r\n        \"https://specials-images.forbesimg.com/imageserve/5e01fac525ab5d0007cf2ed3/960x0.jpg?fit=scale\",\r\n      postContent: \"Whaaaaat?\",\r\n      postDate: \"28 Feb.\",\r\n    },\r\n  ],\r\n  authors: [\r\n    {\r\n      name: \"Anakin Skywalker\",\r\n      nickname: \"@dart_vader\",\r\n      image:\r\n        \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n    },\r\n    {\r\n      name: \"Luke Skywalker\",\r\n      nickname: \"@last_jedi\",\r\n      image:\r\n        \"https://imagesvc.meredithcorp.io/v3/mm/image?q=85&c=sc&poi=face&w=2000&h=1047&url=https%3A%2F%2Fstatic.onecms.io%2Fwp-content%2Fuploads%2Fsites%2F6%2F2017%2F03%2Fstar-wars-a-new-hope-2000.jpg\",\r\n    },\r\n    {\r\n      name: \"Ray Skywalker\",\r\n      nickname: \"@rogue\",\r\n      image:\r\n        \"https://www.denofgeek.com/wp-content/uploads/2020/05/star-wars-rey.jpg?fit=1536%2C864\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst postReducer = (store = initialStore, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_NEW_POST\": {\r\n      return {\r\n        ...store,\r\n        posts: [action.newPost, ...store.posts]\r\n      };\r\n    }\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import { createStore } from \"redux\";\r\nimport postsReducer from \"../reducers/postsReducer\";\r\n\r\n  \r\nconst store = createStore(postsReducer)\r\n\r\nexport default store;","import React from \"react\";\nimport Homepage from \"./components/homepage/homepage\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Homepage />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}